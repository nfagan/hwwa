function [uselabs, errcat] = hwwa_add_new_error_types(uselabs, is_valid_saccade, base_mask)

errcat = 'new_error_types';

is_nogo_anticipatory_look_to_target = fcat.mask( uselabs ...
  , intersect(find(is_valid_saccade), base_mask) ...
  , @find, {'nogo_trial', 'broke_cue_fixation', 'saccade_right'} ...
);

is_nogo_broke_cue = fcat.mask( uselabs ...
  , base_mask ...
  , @find, {'nogo_trial', 'broke_cue_fixation', 'no_saccade', 'saccade_left'} ...
);

is_nogo_look_to_target = fcat.mask( uselabs ...
  , base_mask ...
  , @find, {'nogo_trial', 'wrong_go_nogo', 'go_choice'} ...
);

is_go_never_looked_to_target = fcat.mask( uselabs ...
  , base_mask ...
  , @find, {'go_trial', 'wrong_go_nogo', 'no_look_to_target', 'looked_to_target'} ...
);

is_go_anticipatory_look_to_target = fcat.mask( uselabs ...
  , intersect(find(is_valid_saccade), base_mask) ...
  , @find, {'go_trial', 'broke_cue_fixation', 'saccade_right'} ...
);

is_go_broke_cue = fcat.mask( uselabs ...
  , base_mask ...
  , @find, {'go_trial', 'broke_cue_fixation', 'no_saccade', 'saccade_left'} ...
);

addcat( uselabs, errcat );

setcat( uselabs, errcat, 'nogo_anticipatory_saccade', is_nogo_anticipatory_look_to_target );
setcat( uselabs, errcat, 'nogo_looked_to_target', is_nogo_look_to_target );
setcat( uselabs, errcat, 'nogo_broke_cue_fixation', is_nogo_broke_cue );
setcat( uselabs, errcat, 'go_never_looked_to_target', is_go_never_looked_to_target );
setcat( uselabs, errcat, 'go_broke_cue_fixation', is_go_broke_cue );
setcat( uselabs, errcat, 'go_anticipatory_saccade', is_go_anticipatory_look_to_target );
setcat( uselabs, errcat, 'is_correct', find(uselabs, 'correct_true', base_mask) );

% is_unidentified = find( uselabs, '<new_error_types>', base_mask );

end